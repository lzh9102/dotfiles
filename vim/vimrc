" vim runtime config
" Che-Huai Lin <lzh9102@gmail.com>

" Pre-settings {{{
" allow utf-8 characters in vimrc
scriptencoding utf-8
" load python2 (python2 cannot be used after loading python3)
if has('python')
end

" Neovim uses $XDG_CONFIG_HOME/nvim, add ~/.vim also
if has('nvim')
	set runtimepath+=~/.vim
endif

" Pre-settings End}}}

" Plugins {{{
call plug#begin('~/.vim/bundle')

" == Plugins ==
" Languages {{{
"Plug 'jceb/vim-orgmode'
"Plug 'vim-scripts/Ada-Bundle'
Plug 'python-mode/python-mode'
"Plug 'helino/vim-json'
"Plug 'isene/hyperlist.vim'
"Plug 'vim-scripts/DoxyGen-Syntax'
"Plug 'c9s/perlomni.vim'
"Plug 'myhere/vim-nodejs-complete'
"Plug 'sophacles/vim-processing'
"Plug 'wting/rust.vim'
"if has('python') || has('python3')
"	Plug 'Rip-Rip/clang_complete'
"endif
Plug 'xaizek/vim-inccomplete'
"Plug 'digitaltoad/vim-jade'
"Plug 'hail2u/vim-css3-syntax'
"Plug 'wavded/vim-stylus'
"Plug 'vim-scripts/gcov.vim'
"Plug 'vim-scripts/haskell.vim'
Plug 'vim-scripts/upf.vim'
"Plug 'xolox/vim-notes'
"Plug 'xolox/vim-misc'
" NOTE: riv uses <C-e> as a prefix, so it will cause delay on scroll down
"Plug 'Rykka/riv.vim'
"Plug 'git://vim-latex.git.sourceforge.net/gitroot/vim-latex/vim-latex'
"Plug 'vimoutliner/vimoutliner'
"Plug 'davidhalter/jedi-vim'
"Plug 'ingydotnet/vroom-pm'
" }}}

" Editing {{{
Plug 'Lokaltog/vim-easymotion'
"Plug 'git@github.com:lzh9102/YouCompleteMe.git'
"Plug 'vim-scripts/AutoComplPop'
Plug 'vim-scripts/surround.vim'
"Plug 'tpope/vim-surround'
"Plug 'vim-scripts/closetag.vim'
Plug 'tpope/vim-ragtag'
"Plug 'tpope/vim-abolish'
"Plug 'svermeulen/vim-subversive'

" UltiSnips requires vim compiled with python
if has('python') || has ('python3')
	Plug'SirVer/ultisnips'
	Plug'honza/vim-snippets'
	let snippet_plugin = 'ultisnips'
else " use snipMate instead if vim is not compiled with python
	Plug 'vim-scripts/snipMate'
	let snippet_plugin = 'snipmate'
endif

"Plug 'tpope/vim-commentary'
"Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-repeat'
"Plug 'kana/vim-fakeclip'
"Plug 'vim-scripts/Align'
Plug 'vim-scripts/argtextobj.vim'
Plug 'lzh9102/surround-textobj.vim'
"Plug 'vim-scripts/camelcasemotion'
"Plug 'kien/rainbow_parentheses.vim'
"Plug 'vim-scripts/utl.vim'
" }}}

" File and Buffer {{{
Plug 'vim-scripts/a.vim'
"Plug 'vim-scripts/FencView.vim'
Plug 'danro/rename.vim'
"Plug 'lzh9102/vim-indentfinder'
"Plug 'chrisbra/SudoEdit.vim'
"Plug 'vim-voom/VOoM'
"Plug 'mkitt/tabline.vim'
"Plug 'bagrat/vim-buffet'
"Plug 'vim-scripts/restore_view.vim'
Plug 'ciaranm/securemodelines'
"Plug 'airblade/vim-gitgutter'
Plug 'mhinz/vim-signify', { 'branch': 'legacy' }
Plug 'Shougo/Unite.vim'
"Plug 'ldx/vim-indentfinder'
"Plug 'ciaranm/detectindent'
"Plug 'vim-scripts/Tabmerge'
Plug 'skywind3000/asyncrun.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'lfv89/vim-interestingwords'
" }}}

" Extra Utilities {{{
Plug 'tpope/vim-fugitive', {'tag': 'v2.5'}
"Plug 'vim-scripts/taglist.vim'
"Plug 'lzh9102/nerdtree'
Plug 'guns/xterm-color-table.vim'
"Plug 'mileszs/ack.vim'
Plug 'majutsushi/tagbar'
Plug 'lzh9102/execute.vim'
"Plug 'sotte/presenting.vim'
"Plug 'gregsexton/gitv'
"Plug 'benekastah/neomake'
Plug 'jreybert/vimagit'
" }}}

" Themes {{{
"Plug 'altercation/vim-colors-solarized'
"Plug 'vim-scripts/twilight'
Plug 'lzh9102/vim-distinguished'
"Plug 'zeis/vim-kolor'
"Plug 'sjl/badwolf'
" }}}

" Libraries {{{
"Plug 'Shougo/vimproc.vim'
"Plug 'vim-scripts/L9'
" }}}

" Others {{{
"Plug 'vim-scripts/HJKL'
"Plug 'sophacles/vim-bundle-sparkup'
" }}}

call plug#end()
" Plugin End }}}

" Core Editor Settings {{{

"    Appearance {{{
set number             " show line numbers
"set rnu                " relative numbering
set cursorline         " highlight the current line
set noshowmatch        " vim already highlights matching parenthesis
set laststatus=2       " always display status bar
set wildmenu           " command completion menu
set wildmode=list:full " menu: match until the longest common prefix
set display+=lastline  " show incomplete lines
syntax on              " enable syntax highlighting

if v:version >= 703
	set colorcolumn=80     " display 80-character column (only in vim >= 7.3)
endif

" folding
" WARNING: foldmethod=syntax slows down typing when there are unmatched parens
"set foldmethod=syntax
"set foldlevelstart=99

" highlight non-indent tab characters and trailing spaces
" NOTE: this must be put before "colorscheme" command to take effect
function! s:MyHighlights() abort
  highlight TrailingSpace ctermbg=129 guibg=#00ff00 " FIXME: guibg not working
  match TrailingSpace /[^\t]\zs\t\+/
  2match TrailingSpace /[ \t]\+$/
endfunction
augroup MyColors
  autocmd!
  autocmd Colorscheme * call s:MyHighlights()
augroup end

" colorscheme
"syntax enable
"set background=dark
"colorscheme solarized
" `distinguished` needs 256-color terminal
if &t_Co == 256
	silent! colorscheme distinguished
else
	silent! colorscheme desert
	" popup-menu color settings
	highlight PmenuSel ctermbg=Green ctermfg=Black
	highlight Pmenu ctermbg=Brown ctermfg=Black
endif

" statusline
function! FugitiveStatusLine()
	if exists("*fugitive#statusline")
		return fugitive#statusline()
	else
		return ""
	endif
endfunction
function! IndentationStatusLine()
	if &expandtab
		return "[spc:" . &shiftwidth . "]"
	else
		return "[tab:" . &tabstop . "]"
	endif
endfunction
set statusline=%<\ [%F]             " filename with path
set statusline+=\ [%{&fileencoding},      " file character encoding
set statusline+=%{&fileformat}]           " file format
set statusline+=\ %{FugitiveStatusLine()} " git branch (when in git repo)
set statusline+=%r\ %m                    " file status (readonly/modified)
set statusline+=%=\ %y\ %{IndentationStatusLine()}\ %l,\ %c\ \<\ %P\ \>

" [vim_listchars] show special characters
set listchars=tab:»–,eol:¬
set showbreak=↪
set list

"set spell
highlight spellbad ctermbg=52

" disable background color of normal text
highlight Normal ctermbg=none

" disable beeping
set belloff=all

"    Appearance End }}}

"    Editing {{{

" omni completion
set ofu=syntaxcomplete#Complete

" virutaledit mode
set virtualedit=block

" completion: don't select the first match if there are multiple matches
set completeopt=longest,menuone

" the default completion setting of neovim doesn't include "i" (included files)
set complete=.,w,b,u,t,i

" default indentation settings
set autoindent
set backspace=2
set expandtab
set tabstop=8
set shiftwidth=2
set softtabstop=2

" make it possible to recover from accidentally deleting a line in insert mode
"inoremap <c-u> <c-g>u<c-u>

" exclude '=' as valid filename characters to ease completion in shell
" scripts.
set isfname-==

" let ':' be word boundary for easier word movement
set iskeyword-=:

" enable repeat indent/unindent
vnoremap > >gv
vnoremap < <gv

" workaround for [[ and ]] when the opening '{' is not on the first column {{{
" NOTE: disabled because there are too many exceptions to this rule
"       (ex. c++ namespaces)
"function! FunctionBeginForward()
"	keeppatterns 'normal j0[[%/{'
"endfunction
"function! FunctionBeginBackward()
"	keeppatterns 'normal ?{w99[{'
"endfunction
"function! FunctionEndForward()
"	keeppatterns 'normal /}b99]}'
"endfunction
"function! FunctionEndBackward()
"	keeppatterns 'normal k$][%?}'
"endfunction
"map [[ :call FunctionBeginBackward()<CR>
"map ][ :call FunctionEndForward()<CR>
"map ]] :call FunctionBeginForward()<CR>
"map [] :call FunctionEndBackward()<CR>
" }}}

" inserting date and time
command! Date execute 'normal a<C-r>=strftime("%Y-%m-%d")<CR><ESC>'
command! Time execute 'normal a<C-r>=strftime("%H:%M:%S")<CR><ESC>'
command! DateTime execute 'normal a<C-r>=strftime("%Y-%m-%d %H:%M:%S")<CR><ESC>'

function! s:MapAllModes(key, action)
	exec "map " . a:key . " " . a:action
	exec "imap " . a:key . " " . a:action
endfunction
command! -nargs=* MapAllModes call s:MapAllModes(<f-args>)

" disable arrow keys (and scrolling in terminal emulator) {{{
"MapAllModes <Up> <nop>
"MapAllModes <Down> <nop>
"MapAllModes <Left> <nop>
"MapAllModes <Right> <nop>
" }}}

" disable mouse {{{
MapAllModes <ScrollWheelUp> <nop>
MapAllModes <S-ScrollWheelUp> <nop>
MapAllModes <C-ScrollWheelUp> <nop>
MapAllModes <ScrollWheelDown> <nop>
MapAllModes <S-ScrollWheelDown> <nop>
MapAllModes <C-ScrollWheelDown> <nop>
MapAllModes <ScrollWheelLeft> <nop>
MapAllModes <S-ScrollWheelLeft> <nop>
MapAllModes <C-ScrollWheelLeft> <nop>
MapAllModes <ScrollWheelRight> <nop>
MapAllModes <S-ScrollWheelRight> <nop>
MapAllModes <C-ScrollWheelRight> <nop>
set mouse=
" }}}

if v:version >= 600
	runtime macros/matchit.vim
endif

"    Editing End }}}

"    File & Buffer {{{

" Return to last edit position when opening files
au BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" load templates (2012-09-05)
au BufNewFile * call LoadTemplate()
function! LoadTemplate()
	let extension = expand('%:e')
	let name_var = substitute(toupper(expand("%:t")), '[^a-zA-Z0-9_]', '_', "g")
	silent! exe 'read ~/.vim/templates/tmpl.' . extension
	silent! exe 'normal k"_dd'
	silent! exe '%s/\$(FILE_CAP_VAR)/' . name_var . '/g'
	silent! exe '/\$(CURSOR_POS)'
	silent! exe 'normal f$"_df)'
endfunction

" swap and backup file settings
set swapfile
set dir=~/.vim/swap// " the trailing // tells vim to create swap with full path
set backupdir=~/.vim/backup/

" recursively search for "tags" file upwards till reaching root
set tags=./tags;,./TAGS;,tags,TAGS

" disable modeline for security (prevent arbitrary code execution)
" see http://www.guninski.com/vim1.html
set modelines=0

" file encoding
set fileencodings=utf-8,ucs-bom,big5,gbk,latin1
set fileencoding=utf-8

" when :make fails, jump to the first error in existing tab or create a new one
set switchbuf=useopen,usetab

" incremental search
set incsearch

" hide inactive buffers instead of closing them
set hidden

" use blowfish as default encryption method (only available in vim >= 7.3)
if !has('nvim') && v:version >= 703
	set cryptmethod=blowfish
endif

" ignore filename patterns when listing files
set wildignore+=*.o,*.pyc

" close and delete file
command! DeleteAndClose call delete(expand('%')) | bdelete!

" open vimrc file
command! Config edit $MYVIMRC

" [asyncrun] automatically open quickfix window at 8 line height
let g:asyncrun_open = 8

function! RunMypyCheck()
  exec 'AsyncRun mypy --check-untyped-defs %'
endfunction
command! Mypy call RunMypyCheck()

function! RunPyLintCheck()
  exec 'AsyncRun pylint-check-errors %'
endfunction
command! Pylint call RunPyLintCheck()

function! ReloadAllFiles()
  let l:tabnr = tabpagenr()
  exec 'tabdo windo e! | normal ' . l:tabnr . 'gt'
endfunction
command! ReloadAll call ReloadAllFiles()

function! RunScons()
  exec 'AsyncRun scons'
endfunction
command! Scons call RunScons()

" vim-airline
let g:airline_extensions = ['tabline', 'branch']
let g:airline_theme = 'luna'
let g:airline#extensions#tabline#buffer_min_count = 2   " don't show tabline with single buffer
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_section_a = ''
let g:airline_section_c = '%F [%{&fileencoding},%{&fileformat}]%r%m'
let g:airline_section_x = ''
let g:airline_section_y = '%y%{IndentationStatusLine()}'
"    File & Buffer End }}}

"    Shortcut {{{

" save file and make
nmap <C-c><C-m> :update<CR>:make<CR>

" Leaders (2012-09-04)
let maplocalleader = '-'
let mapleader = '\'

" switching tabs
"nmap <silent> <C-n> gt
"nmap <silent> <C-p> gT
"nmap <C-c><C-n> :tabnew 
nmap <silent> <C-n> :bn<CR>
nmap <silent> <C-p> :bp<CR>
nmap <C-c><C-n> :edit 
" exclude quickfix window in :bnext and :bprev
au FileType qf set nobuflisted

" toggle hlsearch
" NOTE: neovim treats <C-h> as backspace, so map <C-c><BS> as well
nnoremap <C-c><C-h> :set hlsearch!<CR>
nnoremap <C-c><BS> :set hlsearch!<CR>

" [vim_listchars] toggle show special characters
nnoremap <C-c><C-l> :set list!<CR>

" [plugin_taglist] toggle ctags
"nmap <F11> :Tlist<CR>
"nmap <C-c><C-t> :Tlist<CR>
nmap <silent> <C-c><C-t> :Tagbar<CR>

" toggle relative numbering
nmap <C-c><C-r> :set rnu!<CR>

" [plugin_vimux]
"nmap <C-c><C-e> :VimuxPromptCommand<CR>

" update (write to disk if modified)
nmap <C-c><C-u> :update<CR>

" open corresponding header/source in tab
nmap <silent> <C-c><C-a> :AT<CR>

nmap <silent> <C-c><C-x> :Execute<CR>

" write as root
" superceded by sudoedit plugin
"function! WriteAsRoot()
"	w! !sudo tee % > /dev/null
"	e!
"endfunction
"command WriteAsRoot call WriteAsRoot()

" refresh syntax highlighting
nmap <silent> <C-l> :syntax sync fromstart<CR>:redraw!<CR>

" set the indentation to n spaces
function! s:SetIndentSpaces(n)
	set expandtab
	exec 'set shiftwidth=' . a:n
endfunction
command! -nargs=* SetIndentSpaces call s:SetIndentSpaces(<f-args>)

command! SetExec call system('chmod +x ' . shellescape(expand('%:p')))

command! StripTrailingSpace call execute(':%s/\s\+$//g')

"    Shortcut End }}}

" File Types {{{
" force "*.md" to be opened as markdown
au BufNewFile,BufRead *.md set ft=markdown
" }}}

" Core Editor Settings End }}}

" Plugin Settings {{{

" detectindent settings
"au BufReadPost * :DetectIndent
"let g:detectindent_preferred_expandtab = 0
"let g:detectindent_preferred_indent = 3

" vim-orgmode (2012-09-04)
" <S-CR> doesn't work, so remap the function to <CR>
au FileType org nmap <buffer> <CR> <Plug>OrgNewHeadingBelowNormal

" Utl settings
let g:utl_cfg_hdl_scm_http = ':!bash -c "firefox %u >& /dev/null &"'

" Align settings
let g:Align_xstrlen=3 " fix for wide characters

" enable doxygen syntax highlighting (depends on the DoxyGen-Syntax plugin)
au Syntax {cpp,c,idl} runtime syntax/doxygen.vim 

" FencView settings (2012-10-17)
" disable auto detection of encoding
let g:fencview_autodetect=0

" easymotion leader
let g:EasyMotion_leader_key = '-'

" nerdtree plugins
let g:nerdtree_open_cmd = 'kde-open'
let g:nerdtree_add_to_playlist_cmd = 'smplayer -add-to-playlist'

" python-mode settings
let g:pymode_lint = 0
let g:pymode_folding = 0 
let g:pymode_rope = 0
let g:pymode_syntax_docstrings = 0
let g:pymode_trim_whitespaces = 0     " don't trim whitespaces on save

" vim-outliner: allow using tab and space to toggle folding
"au Filetype vo_base nnoremap <TAB> za
"au Filetype vo_base nnoremap <SPACE> za

" Snippets
if snippet_plugin == 'ultisnips'
	" UltiSnips
	let g:UltiSnipsExpandTrigger="<tab>"
	let g:UltiSnipsJumpForwardTrigger="<tab>"
	let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

" rainbow parentheses
"function! ToggleRainbowParentheses()
"	:RainbowParenthesesToggle
"	:RainbowParenthesesLoadRound
"	:RainbowParenthesesLoadSquare
"	:RainbowParenthesesLoadBraces
"endfunction
"command RainbowParentheses call ToggleRainbowParentheses()

" AutoComplPop (auto completion popup)
"   disable: keywords, files
let g:acp_behaviorKeywordLength = -1
let g:acp_behaviorFileLength = -1
"   enable: perl
let g:acp_behaviorPerlOmniLength = 0

" SudoEdit
let g:sudo_no_gui = 1

" Tagbar
let g:tagbar_left = 1
let g:tagbar_width = 30

" Notes
"let g:notes_directories = ['~/Dropbox/Documents/notes']
"let g:notes_suffix = '.org'
"let g:notes_title_sync = 'no'
"let g:notes_smart_quotes = 0

" VOoM outliner {{{
nmap <silent> <C-c><C-v> :VoomToggle<CR>
let g:voom_ft_modes = {
	\ 'markdown': 'markdown',
	\ 'tex': 'latex',
	\ 'rst': 'rest',
	\ 'html': 'html',
	\ 'org': 'org',
	\ }
" disable <TAB> key switching between voom and body
let g:voom_tab_key = "<nop>"
" }}}

" Ack
" use ag instead if it is available
if executable('ag')
  let g:ackprg = 'ag --nogroup --nocolor --column'
elseif executable('ack')
  let g:ackprg = 'ack --nogroup --nocolor --column'
end
function! s:Ack(qargs)
  if !exists('g:ackprg')
    return
  end
  exec "AsyncRun " . g:ackprg . " " . a:qargs
endfunction
if exists('g:ackprg')
  command! -nargs=* Ack call s:Ack(<q-args>)
end

" ragtag: close-tag
imap  <C-x>/

" vim-gitgutter
let g:gitgutter_escape_grep = 1

let g:rainbow_active = 0
"autocmd VimEnter * RainbowToggle

" Unite.vim {{{
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  nmap <buffer> <C-c> <Plug>(unite_exit)
  nmap <buffer> <ESC> <Plug>(unite_exit)
  if exists('*unite#custom#profile')
    call unite#custom#profile('default', 'context', {
          \ 'start_insert': 1,
          \ 'smartcase': 1,
          \ 'direction': 'dynamicbottom',
          \ })
  endif
endfunction

nnoremap <silent> <C-c><C-f> :UniteWithBufferDir file<CR>
nnoremap <silent> <C-c><C-p> :UniteWithCurrentDir file_rec<CR>
nnoremap <silent> <C-c><C-b> :Unite buffer<CR>
" }}}

let g:tagbar_ctags_bin = $HOME . '/.bin/ctags-wrapper'

let g:signify_vcs_list = ['perforce', 'git']
let g:signify_vcs_cmds_diffmode = {'perforce': 'p4 print %f', 'git': 'git diff %f', 'hg': 'hg diff %f'}

" vim-buffet
"let g:buffet_always_show_tabline = 0
"let g:buffet_show_index = 1
"
"nmap <leader>1 <Plug>BuffetSwitch(1)
"nmap <leader>2 <Plug>BuffetSwitch(2)
"nmap <leader>3 <Plug>BuffetSwitch(3)
"nmap <leader>4 <Plug>BuffetSwitch(4)
"nmap <leader>5 <Plug>BuffetSwitch(5)
"nmap <leader>6 <Plug>BuffetSwitch(6)
"nmap <leader>7 <Plug>BuffetSwitch(7)
"nmap <leader>8 <Plug>BuffetSwitch(8)
"nmap <leader>9 <Plug>BuffetSwitch(9)
"nmap <leader>0 <Plug>BuffetSwitch(10)
"nnoremap <silent> <C-c><C-b> :Unite buffer<CR>
"
"function! g:BuffetSetCustomColors()
"  hi! BuffetCurrentBuffer cterm=NONE ctermfg=255 ctermbg=0   guifg=#ffffff guibg=#000000
"  hi! BuffetActiveBuffer  cterm=NONE ctermfg=250 ctermbg=238 guifg=#cccccc guibg=#444444
"  hi! BuffetBuffer        cterm=NONE ctermfg=250 ctermbg=238 guifg=#cccccc guibg=#444444
"  hi! BuffetTab           cterm=NONE ctermfg=250 ctermbg=238 guifg=#cccccc guibg=#444444
"endfunction

" Plugin Settings End }}}

" Synopsys settings
source ~/.vim/synopsys.vim

" Post-settings {{{

" Neovim uses $XDG_CONFIG_HOME/nvim/after, add ~/.vim/after also
if has('nvim')
	set runtimepath+=~/.vim/after
endif

function! g:BeautifyXML()
  exec s/<[^>]*>/\r&\r/g<CR>:g/^$/d<CR>gg=G
endfunction
nnoremap ,= :s/<[^>]*>/\r&\r/g<CR>:g/^$/d<CR>gg=G

" }}}
